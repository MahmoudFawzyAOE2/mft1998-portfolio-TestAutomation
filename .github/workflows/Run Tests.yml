# This wWrkflow excutes he automated test cases in the repo 

name: Run Tests

on:
  # Trigger1: trigger [run-tests] is sent from the website main repo when pushing new commit
  repository_dispatch: 
    types: [run-tests]

  # Trigger2: when pushing new code to the tests repo
  push:
    branches:
      - main
    paths:
      - "src/**"

  # Trigger3: Manual Trigger 
  workflow_dispatch:

# allow the workflow to commit code to the repo
permissions:
  contents: write
  
jobs:
  test:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout test repo
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'  # Changed from 11 to 21
          distribution: 'temurin'
          
      - name: Run tests
        run: |
          date +"%H:%M:%S"
          mvn clean test -B --no-transfer-progress -Dheadless=true || true
        continue-on-error: true  

      - name: Debug - Check test-output folders
        run: |
          echo "=== Debugging: Checking for test-output folders ==="
          echo "Current working directory: $(pwd)"
          echo ""
          
          # Find all test-output directories in the system
          echo "Searching for test-output folders..."
          find . -type d -name "test-output" -exec echo "Found: {}" \; 2>/dev/null || echo "No test-output folders found with find command"
          
          echo ""
          echo "Checking current directory structure:"
          ls -la
          
          echo ""
          echo "Checking if test-output exists in current directory:"
          if [ -d "test-output" ]; then
            echo "✓ test-output directory exists"
            echo "Contents of test-output:"
            ls -la test-output/
            echo ""
            echo "Last modified time of test-output directory:"
            stat test-output/ | grep -E "(Modify|Access|Change)"
            echo ""
            echo "File modification times in test-output:"
            find test-output/ -type f -exec ls -la {} \; 2>/dev/null || echo "No files found in test-output"
          else
            echo "✗ test-output directory does not exist in current directory"
          fi
          
          echo ""
          echo "Checking for test-output in common Maven locations:"
          for dir in target/surefire-reports target/failsafe-reports target/test-output; do
            if [ -d "$dir" ]; then
              echo "✓ Found: $dir"
              echo "  Last modified: $(stat "$dir" | grep Modify || echo 'Unable to get modification time')"
              echo "  Contents:"
              ls -la "$dir/" | head -10
            else
              echo "✗ Not found: $dir"
            fi
          done
          
          echo "=== End debugging ==="

      - name: Create test-output from Maven reports
        run: |
          # Create test-output directory if it doesn't exist
          mkdir -p test-output
          
          if [ -d "target/surefire-reports" ]; then
            echo "Processing native TestNG reports from surefire-reports..."
            
            # Copy native TestNG reports (files directly in surefire-reports)
            echo "✓ Copying native TestNG reports..."
            find target/surefire-reports -maxdepth 1 -type f -name "*.html" -exec cp {} test-output/ \;
            find target/surefire-reports -maxdepth 1 -type f -name "*.css" -exec cp {} test-output/ \;
            find target/surefire-reports -maxdepth 1 -type f -name "*.js" -exec cp {} test-output/ \;
            find target/surefire-reports -maxdepth 1 -type f -name "*.xml" -exec cp {} test-output/ \;
            find target/surefire-reports -maxdepth 1 -type f -name "*.txt" -exec cp {} test-output/ \;
            find target/surefire-reports -maxdepth 1 -type f -name "*.png" -exec cp {} test-output/ \;
            find target/surefire-reports -maxdepth 1 -type f -name "*.gif" -exec cp {} test-output/ \;
            
            # Ensure we get key TestNG files
            if [ -f "target/surefire-reports/testng-results.xml" ]; then
              echo "✓ Copied testng-results.xml"
            fi
            
            if [ -f "target/surefire-reports/emailable-report.html" ]; then
              echo "✓ Copied emailable-report.html"
            fi
            
            echo "Native TestNG reports copied successfully!"
          else
            echo "⚠️  No surefire-reports directory found"
          fi
          
          # Add timestamp
          date > test-output/run_timestamp.txt
          
          echo ""
          echo "Final test-output contents:"
          ls -la test-output/
            
      - name: Add timestamp to reports
        run: date > test-output/run_timestamp.txt
        
      - name: Commit and push test-output reports
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -f test-output || true
          git commit -m "chore: update TestNG test-output reports [skip ci]" || echo "No changes to commit"
          git push origin HEAD:${GITHUB_REF#refs/heads/}
          
      - name: Sync test-output to TestReport repository
        env:
          PAT: ${{ secrets.PAT_TOKEN }}
        run: |
          # Clone reporting repo
          git clone https://x-access-token:${PAT}@github.com/MahmoudFawzyAOE2/mft1998-portfolio-TestReport.git temp-repo2
          cd temp-repo2

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Replace old reports with fresh ones
          rm -rf test-output
          cp -r ../test-output ./test-output

          # Add timestamp so commits are guaranteed
          date > test-output/run_timestamp.txt

          git add -f test-output/
          git commit -m "chore: update test-output from TestAutomation CI [skip ci]" --allow-empty
          git push origin main

          cd ..
          rm -rf temp-repo2

      - name: Send Email with Results
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USER }}
          password: ${{ secrets.EMAIL_PASS }}
          subject: "Portfolio Website Tests Results"
          to: 1998mft1998@gmail.com
          from: GitHub Actions
          body: "Tests finished. Check results in GitHub Actions artifacts or at https://mahmoudfawzyaoe2.github.io/mft1998-portfolio-TestReport."
